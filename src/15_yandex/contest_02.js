// Квантовый ускоритель
// Вам необходимо помочь ученому починить квантовый ускоритель, но для этого нужно разобраться с перемещением квантов.
// Ученый смог найти схему устройства и проанализировать логику его работы.
// Оказалось, что при перемещении кванта в заданную точку пространства, он может разделиться на несколько квантов, которые также нужно переместить.
// Причем делать это нужно в определенном порядке во избежание появления пространственно-временных аномалий.
// Так же учтите, что не должно происходить одновременного переноса более N квантов, так как это приведет к поломке ядра ускорителя.
//
// Формат ввода
// На вход подается массив объектов, описывающих кванты для переноса. Объект имеет структуру:
//
// interface Quantum {
//     id: string; // идентификатор кванта
//     priority: number; // приоритет переноса - сначала переносим кванты с наибольшим приоритетом
//     transfer: () => Promise<Quantum[]>; // асинхронная функция, которая перемещает квант и возвращает список квантов,
//     на которые разделился исходный, либо null
// }
// Формат вывода
// От вас требуется написать асинхронную функцию, которая принимает на вход список квантов и максимальное количество перемещаемых квантов,
// а возвращает список идентификаторов всех перемещенных квантов в порядке их перемещения:
//
// function transferQuantums(quantums: Quantum[], n: Number): Promise<string[]>;
// Ускоритель обрабатывает кванты максимально возможными по количеству группами, но не большими, чем n квантов.
// Пока кванты группы не перемещены, другие кванты не берутся в обработку, а ожидают своей очереди.
// Кванты с одинаковым приоритетом нужно перемещать в порядке их перечисления или появления.
// Примечание
// Исходный код нужно оформить следующим образом:
//
// module.exports = function (quantums, n) {
//     // ваше решение
// }

const quantums = [
    {
        id: '3dklashdjsaj',
        priority: 3,
        transfer: transfer([
            {
                id: '2dklashdjsaj',
                priority: 2
            },
            {
                id: '1dklashdjsaj',
                priority: 1
            },
            {
                id: '4dklashdjsaj',
                priority: 4
            },], 2)
    },
    {
        id: '2dklashdjsaj',
        priority: 2,

    },
    {
        id: '1dklashdjsaj',
        priority: 1
    },
    {
        id: '4dklashdjsaj',
        priority: 4
    },
]

function transfer(quantums, n) {
    const sorted = quantums.sort((a, b) => a.priority - b.priority).slice(0, n)
    console.log(sorted.map(el => el.transfer.call(1)))
    return new Promise((res, rej) => {
        res(sorted.map(el => el.id))
    })
}

console.log(transfer(quantums, 2))